***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
  protecting BOOL .
  sort N .
  sort NoN .
  subsort NoN < N .

***************** SINTAXIS *****************
  op cero : -> N .
  op sucesor : N -> N .
  op _+_ : N N -> N [assoc comm] .  --- suma en infijo
  op max : N N -> N .               --- máximo

  op esCero : N -> Bool .
  op esIgual : N N -> Bool .
  op esDistinto : N N -> Bool .

  op NODEFINIDO : -> NoN .
  op INFINITO : -> NoN .
  op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
  vars n m : N .

  --- suma
  eq n + cero = n .
  eq n + sucesor(m) = sucesor(n + m) .

  --- máximo
  eq max(cero, m) = m .
  eq max(n, cero) = n .
  eq max(sucesor(n), sucesor(m)) = sucesor(max(n, m)) .

  --- booleanos
  eq esCero(cero) = true .
  eq esCero(sucesor(n)) = false .

  eq esIgual(cero, n) = esCero(n) .
  eq esIgual(sucesor(n), cero) = false .
  eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .

  eq esDistinto(n, m) = not esIgual(n, m) .

endfm


***************** NOMBRE *******************
fmod VOCAL is

***************** CONJUNTOS ****************
  protecting BOOL .
  sort V .

***************** SINTAXIS *****************
  ops A E I O U : -> V .
  op esIgual : V V -> Bool .
  op esDistinta : V V -> Bool .
  op esMenor : V V -> Bool .

***************** SEMANTICA ****************
  var v w : V .

  eq esIgual(v, v) = true .
  eq esIgual(v, w) = false .
  eq esDistinta(v, w) = not esIgual(v, w) .

  eq esMenor(A, E) = true .
  eq esMenor(A, I) = true .
  eq esMenor(A, O) = true .
  eq esMenor(A, U) = true .

  eq esMenor(E, I) = true .
  eq esMenor(E, O) = true .
  eq esMenor(E, U) = true .

  eq esMenor(I, O) = true .
  eq esMenor(I, U) = true .

  eq esMenor(O, U) = true .

  eq esMenor(v, w) = false .

endfm

***************** NOMBRE *******************
fmod ARBOLBINARIOVOCAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   protecting NATURAL .
   protecting VOCAL .
   sort AB .

***************** SINTAXIS *****************
   op arbolVacio : -> AB .
   op construir : V AB AB -> AB .
   op construirRaiz : V -> AB .
   op esVacio : AB -> Bool .
   op altura : AB -> N .
   op numNodos : AB -> N .

   --- 141 ---
   op esIgual : AB AB -> Bool .
   op esOrdenado : AB -> Bool .
   op cuentaVocal : V AB -> N .
   op cuentaHojas : AB -> N .
   op espejo : AB -> AB .

***************** SEMANTICA ****************
   vars a a1 a2 b b1 b2 : AB .
   var v w : V .

   eq esVacio(arbolVacio) = true .
   eq esVacio(construir(v, a1, a2)) = false .

   eq construirRaiz(v) = construir(v, arbolVacio, arbolVacio) .

   eq altura(arbolVacio) = cero .
   eq altura(construir(v, a1, a2)) = sucesor(max(altura(a1), altura(a2))) .

   eq numNodos(arbolVacio) = cero .
   eq numNodos(construir(v, a1, a2)) = sucesor(numNodos(a1) + numNodos(a2)) .

   --- 141
   eq esIgual(arbolVacio, arbolVacio) = true .
   eq esIgual(arbolVacio, construir(v,a1,a2)) = false .
   eq esIgual(construir(v,a1,a2), arbolVacio) = false .
   eq esIgual(construir(v,a1,a2), construir(w,b1,b2))
      = (esIgual(v,w) and esIgual(a1,b1) and esIgual(a2,b2)) .
   eq cuentaVocal(v, arbolVacio) = cero .
   eq cuentaVocal(v, construir(w,a1,a2))
      = (if esIgual(v,w) then sucesor(cuentaVocal(v,a1) + cuentaVocal(v,a2))
         else cuentaVocal(v,a1) + cuentaVocal(v,a2) fi) .
   eq cuentaHojas(arbolVacio) = cero .
   eq cuentaHojas(construir(v, arbolVacio, arbolVacio)) = sucesor(cero) .
   eq cuentaHojas(construir(v, a1, a2)) = cuentaHojas(a1) + cuentaHojas(a2) .
   eq espejo(arbolVacio) = arbolVacio .
   eq espejo(construir(v,a1,a2)) = construir(v, espejo(a2), espejo(a1)) .
   eq esOrdenado(arbolVacio) = true .
   eq esOrdenado(construir(v, arbolVacio, arbolVacio)) = true .
   eq esOrdenado(construir(v, a1, arbolVacio))
      = (paraTodosHijoIzquierda(a1, v) and esOrdenado(a1)) .
   eq esOrdenado(construir(v, arbolVacio, a2))
      = (paraTodosHijoDerecha(a2, v) and esOrdenado(a2)) .
   eq esOrdenado(construir(v, a1, a2))
      = (paraTodosHijoIzquierda(a1, v) and paraTodosHijoDerecha(a2, v)
         and esOrdenado(a1) and esOrdenado(a2)) .

   op paraTodosHijoIzquierda : AB V -> Bool .
   op paraTodosHijoDerecha : AB V -> Bool .

   eq paraTodosHijoIzquierda(arbolVacio, v) = true .
   eq paraTodosHijoIzquierda(construir(w,a1,a2), v)
      = (not esMenor(v,w) and paraTodosHijoIzquierda(a1,v) and paraTodosHijoIzquierda(a2,v)) .

   eq paraTodosHijoDerecha(arbolVacio, v) = true .
   eq paraTodosHijoDerecha(construir(w,a1,a2), v)
      = (not esMenor(w,v) and paraTodosHijoDerecha(a1,v) and paraTodosHijoDerecha(a2,v)) .

endfm
