
***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .

   op producto : N N -> N .
   op potencia : N N -> N .
   op cuadrado : N -> N .
   op factorial : N -> N .

   op esMenor       : N N -> Bool .
   op esMenorIgual  : N N -> Bool .
   op esMayor       : N N -> Bool .
   op esMayorIgual  : N N -> Bool .
   op maximo        : N N -> N .
   op minimo        : N N -> N .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m : N .

   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .

   eq producto(cero, n) = cero .
   eq producto(sucesor(m), n) = suma(n, producto(m, n)) .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(cero, sucesor(cero)) = cero .
   eq potencia(cero, sucesor(sucesor(m))) = cero .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(sucesor(n), sucesor(m)) = producto(sucesor(n), potencia(sucesor(n), m)) .
   eq cuadrado(n) = producto(n, n) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(sucesor(n), factorial(n)) .

   eq esMenor(cero, cero) = false .
   eq esMenor(sucesor(n), cero) = false .
   eq esMenor(cero, sucesor(m)) = true .
   eq esMenor(sucesor(n), sucesor(m)) = esMenor(n, m) .
   eq esMenorIgual(n, m) = (esMenor(n, m) or esIgual(n, m)) .
   eq esMayor(n, m) = esMenor(m, n) .
   eq esMayorIgual(n, m) = (esMayor(n, m) or esIgual(n, m)) .
   eq maximo(n, m) = if esMayor(n, m) then n else m fi .
   eq minimo(n, m) = if esMenor(n, m) then n else m fi .



   

endfm