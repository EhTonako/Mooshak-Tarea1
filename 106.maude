<<<<<<< Updated upstream
***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   --- 102---
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .
   --- 102---
   op producto : N N -> N .
   op potencia : N N -> N .
   op cuadrado : N -> N .
   op factorial : N -> N .
   --- 103---
   op predecesor : N -> N .
   op resta      : N N -> N .
   op diferencia : N N -> N .
   op difUno     : N N -> Bool .
   --- 104---
   op esMenor       : N N -> Bool .
   op esMenorIgual  : N N -> Bool .
   op esMayor       : N N -> Bool .
   op esMayorIgual  : N N -> Bool .
   op maximo        : N N -> N .
   op minimo        : N N -> N .
   --- 105---
   op division : N N -> N .
   op modulo   : N N -> N .
   op mitad    : N -> N .
   op esPar    : N -> Bool .
   --- 106 ---
  op logaritmo : N -> N .
  op raiz      : N -> N .
  op raiz      : N N -> N .
  op raiz-aux  : N N -> N .
  op raizN-aux : N N N -> N .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m k : N .

   --- 101---
   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .
   --- 102---
   eq producto(cero, n) = cero .
   eq producto(sucesor(m), n) = suma(n, producto(m, n)) .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(cero, sucesor(cero)) = cero .
   eq potencia(cero, sucesor(sucesor(m))) = cero .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(sucesor(n), sucesor(m)) = producto(sucesor(n), potencia(sucesor(n), m)) .
   eq cuadrado(n) = producto(n, n) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(sucesor(n), factorial(n)) .
   --- 103---
   eq predecesor(cero) = NEGATIVO .
   eq predecesor(sucesor(n)) = n .
   eq resta(n, cero) = n .
   eq resta(cero, sucesor(m)) = NEGATIVO .
   eq resta(sucesor(n), sucesor(m)) = resta(n, m) .
   eq diferencia(n, m) = if esMenorIgual(n, m) then resta(m, n) else resta(n, m) fi .
   eq difUno(n, m) = if esCero(diferencia(n, m)) then true else esCero(predecesor(diferencia(n, m))) fi .
   --- 104 ---
   eq esMenor(cero, cero) = false .
   eq esMenor(sucesor(n), cero) = false .
   eq esMenor(cero, sucesor(m)) = true .
   eq esMenor(sucesor(n), sucesor(m)) = esMenor(n, m) .
   eq esMenorIgual(n, m) = (esMenor(n, m) or esIgual(n, m)) .
   eq esMayor(n, m) = esMenor(m, n) .
   eq esMayorIgual(n, m) = (esMayor(n, m) or esIgual(n, m)) .
   eq maximo(n, m) = if esMayor(n, m) then n else m fi .
   eq minimo(n, m) = if esMenor(n, m) then n else m fi .
   --- 105---
   eq division(cero, cero) = NODEFINIDO .
   eq division(sucesor(n), cero) = INFINITO .
   eq division(cero, sucesor(m)) = cero .
   eq division(n, sucesor(m)) = if esMenor(n, sucesor(m)) then cero else sucesor(division(resta(n, sucesor(m)), sucesor(m))) fi .
   eq modulo(n, cero) = NODEFINIDO .
   eq modulo(cero, sucesor(m)) = cero .
   eq modulo(n, m) = resta(n, producto(division(n, m), m)) .
   eq mitad(cero) = cero .
   eq mitad(sucesor(cero)) = cero .
   eq mitad(sucesor(sucesor(n))) = sucesor(mitad(n)) .
   eq esPar(cero) = true .
   eq esPar(sucesor(cero)) = false .
   eq esPar(sucesor(sucesor(n))) = esPar(n) .
   --- 106 ---
  eq logaritmo(cero) = INFINITO .
  eq logaritmo(sucesor(cero)) = cero .
  eq logaritmo(sucesor(sucesor(n))) = sucesor(logaritmo(mitad(sucesor(sucesor(n))))) .
  eq raiz(n) = raiz-aux(cero, n) .
  eq raiz-aux(k, n) = if esMenorIgual(cuadrado(sucesor(k)), n) then raiz-aux(sucesor(k), n) else k fi .

  eq raiz(cero, m) = NODEFINIDO .
  eq raiz(sucesor(n), m) = raizN-aux(cero, sucesor(n), m) .
  eq raizN-aux(k, n, m) = if esMenorIgual(potencia(sucesor(k), n), m) then raizN-aux(sucesor(k), n, m) else k fi .
endfm
=======
***************** NOMBRE *******************
fmod NATURAL is

***************** CONJUNTOS ****************
   protecting BOOL .
   sort N .
   sort NoN .
   subsort NoN < N .

***************** SINTAXIS *****************
   --- 102---
   op cero : -> N .
   op sucesor : N -> N .
   op suma : N N -> N .
   op esCero : N -> Bool .
   op esIgual : N N -> Bool .
   op esDistinto : N N -> Bool .
   --- 102---
   op producto : N N -> N .
   op potencia : N N -> N .
   op cuadrado : N -> N .
   op factorial : N -> N .
   --- 103---
   op predecesor : N -> N .
   op resta      : N N -> N .
   op diferencia : N N -> N .
   op difUno     : N N -> Bool .
   --- 104---
   op esMenor       : N N -> Bool .
   op esMenorIgual  : N N -> Bool .
   op esMayor       : N N -> Bool .
   op esMayorIgual  : N N -> Bool .
   op maximo        : N N -> N .
   op minimo        : N N -> N .
   --- 105---
   op division : N N -> N .
   op modulo   : N N -> N .
   op mitad    : N -> N .
   op esPar    : N -> Bool .
   --- 106 ---
  op logaritmo : N -> N .
  op raiz      : N -> N .
  op raiz      : N N -> N .
  op raiz-aux  : N N -> N .
  op raizN-aux : N N N -> N .

   op NODEFINIDO : -> NoN .
   op INFINITO : -> NoN .
   op NEGATIVO : -> NoN .

***************** SEMANTICA ****************
   var n m k : N .

   --- 101---
   eq suma(cero, n) = n .
   eq suma(sucesor(m), n) = sucesor(suma(m, n)) .
   eq esCero(cero) = true .
   eq esCero(sucesor(n)) = false .
   eq esIgual(cero, n) = esCero(n) .
   eq esIgual(sucesor(n), cero) = false .
   eq esIgual(sucesor(n), sucesor(m)) = esIgual(n, m) .
   eq esDistinto(n, m) = not esIgual(n, m) .
   --- 102---
   eq producto(cero, n) = cero .
   eq producto(sucesor(m), n) = suma(n, producto(m, n)) .
   eq potencia(n, cero) = sucesor(cero) .
   eq potencia(cero, sucesor(cero)) = cero .
   eq potencia(cero, sucesor(sucesor(m))) = cero .
   eq potencia(cero, cero) = NODEFINIDO .
   eq potencia(sucesor(n), sucesor(m)) = producto(sucesor(n), potencia(sucesor(n), m)) .
   eq cuadrado(n) = producto(n, n) .
   eq factorial(cero) = sucesor(cero) .
   eq factorial(sucesor(n)) = producto(sucesor(n), factorial(n)) .
   --- 103---
   eq predecesor(cero) = NEGATIVO .
   eq predecesor(sucesor(n)) = n .
   eq resta(n, cero) = n .
   eq resta(cero, sucesor(m)) = NEGATIVO .
   eq resta(sucesor(n), sucesor(m)) = resta(n, m) .
   eq diferencia(n, m) = if esMenorIgual(n, m) then resta(m, n) else resta(n, m) fi .
   eq difUno(n, m) = if esCero(diferencia(n, m)) then true else esCero(predecesor(diferencia(n, m))) fi .
   --- 104 ---
   eq esMenor(cero, cero) = false .
   eq esMenor(sucesor(n), cero) = false .
   eq esMenor(cero, sucesor(m)) = true .
   eq esMenor(sucesor(n), sucesor(m)) = esMenor(n, m) .
   eq esMenorIgual(n, m) = (esMenor(n, m) or esIgual(n, m)) .
   eq esMayor(n, m) = esMenor(m, n) .
   eq esMayorIgual(n, m) = (esMayor(n, m) or esIgual(n, m)) .
   eq maximo(n, m) = if esMayor(n, m) then n else m fi .
   eq minimo(n, m) = if esMenor(n, m) then n else m fi .
   --- 105---
   eq division(cero, cero) = NODEFINIDO .
   eq division(sucesor(n), cero) = INFINITO .
   eq division(cero, sucesor(m)) = cero .
   eq division(n, sucesor(m)) = if esMenor(n, sucesor(m)) then cero else sucesor(division(resta(n, sucesor(m)), sucesor(m))) fi .
   eq modulo(n, cero) = NODEFINIDO .
   eq modulo(cero, sucesor(m)) = cero .
   eq modulo(n, m) = resta(n, producto(division(n, m), m)) .
   eq mitad(cero) = cero .
   eq mitad(sucesor(cero)) = cero .
   eq mitad(sucesor(sucesor(n))) = sucesor(mitad(n)) .
   eq esPar(cero) = true .
   eq esPar(sucesor(cero)) = false .
   eq esPar(sucesor(sucesor(n))) = esPar(n) .
   --- 106 ---
  eq logaritmo(cero) = INFINITO .
  eq logaritmo(sucesor(cero)) = cero .
  eq logaritmo(sucesor(sucesor(n))) = sucesor(logaritmo(mitad(sucesor(sucesor(n))))) .
  eq raiz(n) = raiz-aux(cero, n) .
  eq raiz-aux(k, n) = if esMenorIgual(cuadrado(sucesor(k)), n) then raiz-aux(sucesor(k), n) else k fi .

  eq raiz(cero, m) = NODEFINIDO .
  eq raiz(sucesor(n), m) = raizN-aux(cero, sucesor(n), m) .
  eq raizN-aux(k, n, m) = if esMenorIgual(potencia(sucesor(k), n), m) then raizN-aux(sucesor(k), n, m) else k fi .
endfm
>>>>>>> Stashed changes
